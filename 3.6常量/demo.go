package main

import "fmt"

func main()  {
	//常量定义了也可以不用
	//逐个定义常数的时候必须显式的指定它的值
	const str = "string"
	/*如果是批量声明的常量，除了第一个外其它的常量右边的初始化表达式都可以省略
	  如果省略初始化表达式则表示使用前面常量的初始化表达表达式写法，对应的常量类型也也是一样的*/
	const (
		a = 1
		b
		c = 2
		d
	)
	fmt.Println(a, b, c, d)//"1 1 2 2"
	/*常量声明可以使用iota常量生成器初始化，它用于生成一组以相似规则初始化的常量，但是不用每行都写一遍初始化表达式
	  在一个const声明语句中，在第一个声明的常量所在的行，iota将会被置为0,然后在每一个有常量声明的行加1*/
	const (
		n1 = iota
		n2
		n3
		n4
		n5
		n6
		n7
		n8
	)
	fmt.Println(n1, n2, n3, n4, n5, n6, n7, n8) //0 1 2 3 4 5 6 7
	const (
		_ = 1 << (10 * iota)
		KiB
		MiB
		GiB
		TiB
		PiB
		EiB
		ZiB
		YiB
	)
	fmt.Println(YiB/ZiB)

	/*golang语言的常量有个不同之处虽然一个常量可以有任意一个确定的基础类型，但是许多常量并没有
	一个明确的基础类型。编译器为这些没有明确基础类型的数字常量提供比基础类型更高精度的算术运算，
	可以认为至少有256bit的运算精度*/
}
